// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/appserver/appserver.proto

package appserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppserverService_CreateAppserver_FullMethodName  = "/v1.appserver.AppserverService/CreateAppserver"
	AppserverService_GetByIdAppserver_FullMethodName = "/v1.appserver.AppserverService/GetByIdAppserver"
	AppserverService_ListAppservers_FullMethodName   = "/v1.appserver.AppserverService/ListAppservers"
	AppserverService_DeleteAppserver_FullMethodName  = "/v1.appserver.AppserverService/DeleteAppserver"
)

// AppserverServiceClient is the client API for AppserverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppserverServiceClient interface {
	CreateAppserver(ctx context.Context, in *CreateAppserverRequest, opts ...grpc.CallOption) (*CreateAppserverResponse, error)
	GetByIdAppserver(ctx context.Context, in *GetByIdAppserverRequest, opts ...grpc.CallOption) (*GetByIdAppserverResponse, error)
	ListAppservers(ctx context.Context, in *ListAppserversRequest, opts ...grpc.CallOption) (*ListAppserversResponse, error)
	DeleteAppserver(ctx context.Context, in *DeleteAppserverRequest, opts ...grpc.CallOption) (*DeleteAppserverResponse, error)
}

type appserverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppserverServiceClient(cc grpc.ClientConnInterface) AppserverServiceClient {
	return &appserverServiceClient{cc}
}

func (c *appserverServiceClient) CreateAppserver(ctx context.Context, in *CreateAppserverRequest, opts ...grpc.CallOption) (*CreateAppserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppserverResponse)
	err := c.cc.Invoke(ctx, AppserverService_CreateAppserver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverServiceClient) GetByIdAppserver(ctx context.Context, in *GetByIdAppserverRequest, opts ...grpc.CallOption) (*GetByIdAppserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdAppserverResponse)
	err := c.cc.Invoke(ctx, AppserverService_GetByIdAppserver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverServiceClient) ListAppservers(ctx context.Context, in *ListAppserversRequest, opts ...grpc.CallOption) (*ListAppserversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppserversResponse)
	err := c.cc.Invoke(ctx, AppserverService_ListAppservers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverServiceClient) DeleteAppserver(ctx context.Context, in *DeleteAppserverRequest, opts ...grpc.CallOption) (*DeleteAppserverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppserverResponse)
	err := c.cc.Invoke(ctx, AppserverService_DeleteAppserver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppserverServiceServer is the server API for AppserverService service.
// All implementations must embed UnimplementedAppserverServiceServer
// for forward compatibility.
type AppserverServiceServer interface {
	CreateAppserver(context.Context, *CreateAppserverRequest) (*CreateAppserverResponse, error)
	GetByIdAppserver(context.Context, *GetByIdAppserverRequest) (*GetByIdAppserverResponse, error)
	ListAppservers(context.Context, *ListAppserversRequest) (*ListAppserversResponse, error)
	DeleteAppserver(context.Context, *DeleteAppserverRequest) (*DeleteAppserverResponse, error)
	mustEmbedUnimplementedAppserverServiceServer()
}

// UnimplementedAppserverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppserverServiceServer struct{}

func (UnimplementedAppserverServiceServer) CreateAppserver(context.Context, *CreateAppserverRequest) (*CreateAppserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppserver not implemented")
}
func (UnimplementedAppserverServiceServer) GetByIdAppserver(context.Context, *GetByIdAppserverRequest) (*GetByIdAppserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdAppserver not implemented")
}
func (UnimplementedAppserverServiceServer) ListAppservers(context.Context, *ListAppserversRequest) (*ListAppserversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppservers not implemented")
}
func (UnimplementedAppserverServiceServer) DeleteAppserver(context.Context, *DeleteAppserverRequest) (*DeleteAppserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppserver not implemented")
}
func (UnimplementedAppserverServiceServer) mustEmbedUnimplementedAppserverServiceServer() {}
func (UnimplementedAppserverServiceServer) testEmbeddedByValue()                          {}

// UnsafeAppserverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppserverServiceServer will
// result in compilation errors.
type UnsafeAppserverServiceServer interface {
	mustEmbedUnimplementedAppserverServiceServer()
}

func RegisterAppserverServiceServer(s grpc.ServiceRegistrar, srv AppserverServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppserverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppserverService_ServiceDesc, srv)
}

func _AppserverService_CreateAppserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverServiceServer).CreateAppserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverService_CreateAppserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverServiceServer).CreateAppserver(ctx, req.(*CreateAppserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverService_GetByIdAppserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdAppserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverServiceServer).GetByIdAppserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverService_GetByIdAppserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverServiceServer).GetByIdAppserver(ctx, req.(*GetByIdAppserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverService_ListAppservers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppserversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverServiceServer).ListAppservers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverService_ListAppservers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverServiceServer).ListAppservers(ctx, req.(*ListAppserversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverService_DeleteAppserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverServiceServer).DeleteAppserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverService_DeleteAppserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverServiceServer).DeleteAppserver(ctx, req.(*DeleteAppserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppserverService_ServiceDesc is the grpc.ServiceDesc for AppserverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppserverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.appserver.AppserverService",
	HandlerType: (*AppserverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppserver",
			Handler:    _AppserverService_CreateAppserver_Handler,
		},
		{
			MethodName: "GetByIdAppserver",
			Handler:    _AppserverService_GetByIdAppserver_Handler,
		},
		{
			MethodName: "ListAppservers",
			Handler:    _AppserverService_ListAppservers_Handler,
		},
		{
			MethodName: "DeleteAppserver",
			Handler:    _AppserverService_DeleteAppserver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/appserver/appserver.proto",
}
