// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/appserver_permission/appserver_permission.proto

package appserver_permission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppserverPermissionService_Create_FullMethodName             = "/v1.appserver_permission.AppserverPermissionService/Create"
	AppserverPermissionService_ListAppserverUsers_FullMethodName = "/v1.appserver_permission.AppserverPermissionService/ListAppserverUsers"
	AppserverPermissionService_Delete_FullMethodName             = "/v1.appserver_permission.AppserverPermissionService/Delete"
)

// AppserverPermissionServiceClient is the client API for AppserverPermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppserverPermissionServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ListAppserverUsers(ctx context.Context, in *ListAppserverUsersRequest, opts ...grpc.CallOption) (*ListAppserverUsersResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type appserverPermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppserverPermissionServiceClient(cc grpc.ClientConnInterface) AppserverPermissionServiceClient {
	return &appserverPermissionServiceClient{cc}
}

func (c *appserverPermissionServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, AppserverPermissionService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverPermissionServiceClient) ListAppserverUsers(ctx context.Context, in *ListAppserverUsersRequest, opts ...grpc.CallOption) (*ListAppserverUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppserverUsersResponse)
	err := c.cc.Invoke(ctx, AppserverPermissionService_ListAppserverUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverPermissionServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, AppserverPermissionService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppserverPermissionServiceServer is the server API for AppserverPermissionService service.
// All implementations must embed UnimplementedAppserverPermissionServiceServer
// for forward compatibility.
type AppserverPermissionServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	ListAppserverUsers(context.Context, *ListAppserverUsersRequest) (*ListAppserverUsersResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAppserverPermissionServiceServer()
}

// UnimplementedAppserverPermissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppserverPermissionServiceServer struct{}

func (UnimplementedAppserverPermissionServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppserverPermissionServiceServer) ListAppserverUsers(context.Context, *ListAppserverUsersRequest) (*ListAppserverUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppserverUsers not implemented")
}
func (UnimplementedAppserverPermissionServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppserverPermissionServiceServer) mustEmbedUnimplementedAppserverPermissionServiceServer() {
}
func (UnimplementedAppserverPermissionServiceServer) testEmbeddedByValue() {}

// UnsafeAppserverPermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppserverPermissionServiceServer will
// result in compilation errors.
type UnsafeAppserverPermissionServiceServer interface {
	mustEmbedUnimplementedAppserverPermissionServiceServer()
}

func RegisterAppserverPermissionServiceServer(s grpc.ServiceRegistrar, srv AppserverPermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppserverPermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppserverPermissionService_ServiceDesc, srv)
}

func _AppserverPermissionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverPermissionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverPermissionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverPermissionServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverPermissionService_ListAppserverUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppserverUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverPermissionServiceServer).ListAppserverUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverPermissionService_ListAppserverUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverPermissionServiceServer).ListAppserverUsers(ctx, req.(*ListAppserverUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverPermissionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverPermissionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverPermissionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverPermissionServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppserverPermissionService_ServiceDesc is the grpc.ServiceDesc for AppserverPermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppserverPermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.appserver_permission.AppserverPermissionService",
	HandlerType: (*AppserverPermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppserverPermissionService_Create_Handler,
		},
		{
			MethodName: "ListAppserverUsers",
			Handler:    _AppserverPermissionService_ListAppserverUsers_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppserverPermissionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/appserver_permission/appserver_permission.proto",
}
