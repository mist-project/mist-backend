// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/appserver_role/appserver_role.proto

package appserverrole

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppserverRoleService_Create_FullMethodName          = "/v1.appserverrole.AppserverRoleService/Create"
	AppserverRoleService_ListServerRoles_FullMethodName = "/v1.appserverrole.AppserverRoleService/ListServerRoles"
	AppserverRoleService_Delete_FullMethodName          = "/v1.appserverrole.AppserverRoleService/Delete"
)

// AppserverRoleServiceClient is the client API for AppserverRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppserverRoleServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ListServerRoles(ctx context.Context, in *ListServerRolesRequest, opts ...grpc.CallOption) (*ListServerRolesResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type appserverRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppserverRoleServiceClient(cc grpc.ClientConnInterface) AppserverRoleServiceClient {
	return &appserverRoleServiceClient{cc}
}

func (c *appserverRoleServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, AppserverRoleService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverRoleServiceClient) ListServerRoles(ctx context.Context, in *ListServerRolesRequest, opts ...grpc.CallOption) (*ListServerRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServerRolesResponse)
	err := c.cc.Invoke(ctx, AppserverRoleService_ListServerRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverRoleServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, AppserverRoleService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppserverRoleServiceServer is the server API for AppserverRoleService service.
// All implementations must embed UnimplementedAppserverRoleServiceServer
// for forward compatibility.
type AppserverRoleServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	ListServerRoles(context.Context, *ListServerRolesRequest) (*ListServerRolesResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAppserverRoleServiceServer()
}

// UnimplementedAppserverRoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppserverRoleServiceServer struct{}

func (UnimplementedAppserverRoleServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppserverRoleServiceServer) ListServerRoles(context.Context, *ListServerRolesRequest) (*ListServerRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServerRoles not implemented")
}
func (UnimplementedAppserverRoleServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppserverRoleServiceServer) mustEmbedUnimplementedAppserverRoleServiceServer() {}
func (UnimplementedAppserverRoleServiceServer) testEmbeddedByValue()                              {}

// UnsafeAppserverRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppserverRoleServiceServer will
// result in compilation errors.
type UnsafeAppserverRoleServiceServer interface {
	mustEmbedUnimplementedAppserverRoleServiceServer()
}

func RegisterAppserverRoleServiceServer(s grpc.ServiceRegistrar, srv AppserverRoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppserverRoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppserverRoleService_ServiceDesc, srv)
}

func _AppserverRoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverRoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverRoleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverRoleServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverRoleService_ListServerRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServerRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverRoleServiceServer).ListServerRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverRoleService_ListServerRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverRoleServiceServer).ListServerRoles(ctx, req.(*ListServerRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverRoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverRoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverRoleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverRoleServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppserverRoleService_ServiceDesc is the grpc.ServiceDesc for AppserverRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppserverRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.appserverrole.AppserverRoleService",
	HandlerType: (*AppserverRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppserverRoleService_Create_Handler,
		},
		{
			MethodName: "ListServerRoles",
			Handler:    _AppserverRoleService_ListServerRoles_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppserverRoleService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/appserver_role/appserver_role.proto",
}
