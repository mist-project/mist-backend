// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/appserver_role_sub/appserver_role_sub.proto

package appserverrolesub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppserverRoleSubService_CreateAppserverRoleSub_FullMethodName      = "/v1.appserverrolesub.AppserverRoleSubService/CreateAppserverRoleSub"
	AppserverRoleSubService_GetAllAppserverUserRoleSubs_FullMethodName = "/v1.appserverrolesub.AppserverRoleSubService/GetAllAppserverUserRoleSubs"
	AppserverRoleSubService_DeleteAppserverRoleSub_FullMethodName      = "/v1.appserverrolesub.AppserverRoleSubService/DeleteAppserverRoleSub"
)

// AppserverRoleSubServiceClient is the client API for AppserverRoleSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppserverRoleSubServiceClient interface {
	CreateAppserverRoleSub(ctx context.Context, in *CreateAppserverRoleSubRequest, opts ...grpc.CallOption) (*CreateAppserverRoleSubResponse, error)
	GetAllAppserverUserRoleSubs(ctx context.Context, in *GetAllAppserverUserRoleSubsRequest, opts ...grpc.CallOption) (*GetAllAppserverUserRoleSubsResponse, error)
	DeleteAppserverRoleSub(ctx context.Context, in *DeleteAppserverRoleSubRequest, opts ...grpc.CallOption) (*DeleteAppserverRoleSubResponse, error)
}

type appserverRoleSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppserverRoleSubServiceClient(cc grpc.ClientConnInterface) AppserverRoleSubServiceClient {
	return &appserverRoleSubServiceClient{cc}
}

func (c *appserverRoleSubServiceClient) CreateAppserverRoleSub(ctx context.Context, in *CreateAppserverRoleSubRequest, opts ...grpc.CallOption) (*CreateAppserverRoleSubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppserverRoleSubResponse)
	err := c.cc.Invoke(ctx, AppserverRoleSubService_CreateAppserverRoleSub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverRoleSubServiceClient) GetAllAppserverUserRoleSubs(ctx context.Context, in *GetAllAppserverUserRoleSubsRequest, opts ...grpc.CallOption) (*GetAllAppserverUserRoleSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAppserverUserRoleSubsResponse)
	err := c.cc.Invoke(ctx, AppserverRoleSubService_GetAllAppserverUserRoleSubs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverRoleSubServiceClient) DeleteAppserverRoleSub(ctx context.Context, in *DeleteAppserverRoleSubRequest, opts ...grpc.CallOption) (*DeleteAppserverRoleSubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppserverRoleSubResponse)
	err := c.cc.Invoke(ctx, AppserverRoleSubService_DeleteAppserverRoleSub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppserverRoleSubServiceServer is the server API for AppserverRoleSubService service.
// All implementations must embed UnimplementedAppserverRoleSubServiceServer
// for forward compatibility.
type AppserverRoleSubServiceServer interface {
	CreateAppserverRoleSub(context.Context, *CreateAppserverRoleSubRequest) (*CreateAppserverRoleSubResponse, error)
	GetAllAppserverUserRoleSubs(context.Context, *GetAllAppserverUserRoleSubsRequest) (*GetAllAppserverUserRoleSubsResponse, error)
	DeleteAppserverRoleSub(context.Context, *DeleteAppserverRoleSubRequest) (*DeleteAppserverRoleSubResponse, error)
	mustEmbedUnimplementedAppserverRoleSubServiceServer()
}

// UnimplementedAppserverRoleSubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppserverRoleSubServiceServer struct{}

func (UnimplementedAppserverRoleSubServiceServer) CreateAppserverRoleSub(context.Context, *CreateAppserverRoleSubRequest) (*CreateAppserverRoleSubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppserverRoleSub not implemented")
}
func (UnimplementedAppserverRoleSubServiceServer) GetAllAppserverUserRoleSubs(context.Context, *GetAllAppserverUserRoleSubsRequest) (*GetAllAppserverUserRoleSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppserverUserRoleSubs not implemented")
}
func (UnimplementedAppserverRoleSubServiceServer) DeleteAppserverRoleSub(context.Context, *DeleteAppserverRoleSubRequest) (*DeleteAppserverRoleSubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppserverRoleSub not implemented")
}
func (UnimplementedAppserverRoleSubServiceServer) mustEmbedUnimplementedAppserverRoleSubServiceServer() {
}
func (UnimplementedAppserverRoleSubServiceServer) testEmbeddedByValue() {}

// UnsafeAppserverRoleSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppserverRoleSubServiceServer will
// result in compilation errors.
type UnsafeAppserverRoleSubServiceServer interface {
	mustEmbedUnimplementedAppserverRoleSubServiceServer()
}

func RegisterAppserverRoleSubServiceServer(s grpc.ServiceRegistrar, srv AppserverRoleSubServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppserverRoleSubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppserverRoleSubService_ServiceDesc, srv)
}

func _AppserverRoleSubService_CreateAppserverRoleSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppserverRoleSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverRoleSubServiceServer).CreateAppserverRoleSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverRoleSubService_CreateAppserverRoleSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverRoleSubServiceServer).CreateAppserverRoleSub(ctx, req.(*CreateAppserverRoleSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverRoleSubService_GetAllAppserverUserRoleSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppserverUserRoleSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverRoleSubServiceServer).GetAllAppserverUserRoleSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverRoleSubService_GetAllAppserverUserRoleSubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverRoleSubServiceServer).GetAllAppserverUserRoleSubs(ctx, req.(*GetAllAppserverUserRoleSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverRoleSubService_DeleteAppserverRoleSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppserverRoleSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverRoleSubServiceServer).DeleteAppserverRoleSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverRoleSubService_DeleteAppserverRoleSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverRoleSubServiceServer).DeleteAppserverRoleSub(ctx, req.(*DeleteAppserverRoleSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppserverRoleSubService_ServiceDesc is the grpc.ServiceDesc for AppserverRoleSubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppserverRoleSubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.appserverrolesub.AppserverRoleSubService",
	HandlerType: (*AppserverRoleSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppserverRoleSub",
			Handler:    _AppserverRoleSubService_CreateAppserverRoleSub_Handler,
		},
		{
			MethodName: "GetAllAppserverUserRoleSubs",
			Handler:    _AppserverRoleSubService_GetAllAppserverUserRoleSubs_Handler,
		},
		{
			MethodName: "DeleteAppserverRoleSub",
			Handler:    _AppserverRoleSubService_DeleteAppserverRoleSub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/appserver_role_sub/appserver_role_sub.proto",
}
