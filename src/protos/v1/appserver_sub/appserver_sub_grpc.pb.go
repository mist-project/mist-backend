// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/appserver_sub/appserver_sub.proto

package appserversub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppserverSubService_Create_FullMethodName                = "/v1.appserversub.AppserverSubService/Create"
	AppserverSubService_ListUserServerSubs_FullMethodName    = "/v1.appserversub.AppserverSubService/ListUserServerSubs"
	AppserverSubService_ListAppserverUserSubs_FullMethodName = "/v1.appserversub.AppserverSubService/ListAppserverUserSubs"
	AppserverSubService_Delete_FullMethodName                = "/v1.appserversub.AppserverSubService/Delete"
)

// AppserverSubServiceClient is the client API for AppserverSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppserverSubServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ListUserServerSubs(ctx context.Context, in *ListUserServerSubsRequest, opts ...grpc.CallOption) (*ListUserServerSubsResponse, error)
	ListAppserverUserSubs(ctx context.Context, in *ListAppserverUserSubsRequest, opts ...grpc.CallOption) (*ListAppserverUserSubsResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type appserverSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppserverSubServiceClient(cc grpc.ClientConnInterface) AppserverSubServiceClient {
	return &appserverSubServiceClient{cc}
}

func (c *appserverSubServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverSubServiceClient) ListUserServerSubs(ctx context.Context, in *ListUserServerSubsRequest, opts ...grpc.CallOption) (*ListUserServerSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserServerSubsResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_ListUserServerSubs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverSubServiceClient) ListAppserverUserSubs(ctx context.Context, in *ListAppserverUserSubsRequest, opts ...grpc.CallOption) (*ListAppserverUserSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppserverUserSubsResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_ListAppserverUserSubs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverSubServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppserverSubServiceServer is the server API for AppserverSubService service.
// All implementations must embed UnimplementedAppserverSubServiceServer
// for forward compatibility.
type AppserverSubServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	ListUserServerSubs(context.Context, *ListUserServerSubsRequest) (*ListUserServerSubsResponse, error)
	ListAppserverUserSubs(context.Context, *ListAppserverUserSubsRequest) (*ListAppserverUserSubsResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAppserverSubServiceServer()
}

// UnimplementedAppserverSubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppserverSubServiceServer struct{}

func (UnimplementedAppserverSubServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppserverSubServiceServer) ListUserServerSubs(context.Context, *ListUserServerSubsRequest) (*ListUserServerSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserServerSubs not implemented")
}
func (UnimplementedAppserverSubServiceServer) ListAppserverUserSubs(context.Context, *ListAppserverUserSubsRequest) (*ListAppserverUserSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppserverUserSubs not implemented")
}
func (UnimplementedAppserverSubServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppserverSubServiceServer) mustEmbedUnimplementedAppserverSubServiceServer() {}
func (UnimplementedAppserverSubServiceServer) testEmbeddedByValue()                             {}

// UnsafeAppserverSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppserverSubServiceServer will
// result in compilation errors.
type UnsafeAppserverSubServiceServer interface {
	mustEmbedUnimplementedAppserverSubServiceServer()
}

func RegisterAppserverSubServiceServer(s grpc.ServiceRegistrar, srv AppserverSubServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppserverSubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppserverSubService_ServiceDesc, srv)
}

func _AppserverSubService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverSubService_ListUserServerSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserServerSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).ListUserServerSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_ListUserServerSubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).ListUserServerSubs(ctx, req.(*ListUserServerSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverSubService_ListAppserverUserSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppserverUserSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).ListAppserverUserSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_ListAppserverUserSubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).ListAppserverUserSubs(ctx, req.(*ListAppserverUserSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverSubService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppserverSubService_ServiceDesc is the grpc.ServiceDesc for AppserverSubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppserverSubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.appserversub.AppserverSubService",
	HandlerType: (*AppserverSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppserverSubService_Create_Handler,
		},
		{
			MethodName: "ListUserServerSubs",
			Handler:    _AppserverSubService_ListUserServerSubs_Handler,
		},
		{
			MethodName: "ListAppserverUserSubs",
			Handler:    _AppserverSubService_ListAppserverUserSubs_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppserverSubService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/appserver_sub/appserver_sub.proto",
}
