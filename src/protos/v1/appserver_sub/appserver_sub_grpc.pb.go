// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/appserver_sub/appserver_sub.proto

package appserversub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppserverSubService_CreateAppserverSub_FullMethodName       = "/v1.appserversub.AppserverSubService/CreateAppserverSub"
	AppserverSubService_GetUserAppserverSubs_FullMethodName     = "/v1.appserversub.AppserverSubService/GetUserAppserverSubs"
	AppserverSubService_GetAllUsersAppserverSubs_FullMethodName = "/v1.appserversub.AppserverSubService/GetAllUsersAppserverSubs"
	AppserverSubService_DeleteAppserverSub_FullMethodName       = "/v1.appserversub.AppserverSubService/DeleteAppserverSub"
)

// AppserverSubServiceClient is the client API for AppserverSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppserverSubServiceClient interface {
	CreateAppserverSub(ctx context.Context, in *CreateAppserverSubRequest, opts ...grpc.CallOption) (*CreateAppserverSubResponse, error)
	GetUserAppserverSubs(ctx context.Context, in *GetUserAppserverSubsRequest, opts ...grpc.CallOption) (*GetUserAppserverSubsResponse, error)
	GetAllUsersAppserverSubs(ctx context.Context, in *GetAllUsersAppserverSubsRequest, opts ...grpc.CallOption) (*GetAllUsersAppserverSubsResponse, error)
	DeleteAppserverSub(ctx context.Context, in *DeleteAppserverSubRequest, opts ...grpc.CallOption) (*DeleteAppserverSubResponse, error)
}

type appserverSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppserverSubServiceClient(cc grpc.ClientConnInterface) AppserverSubServiceClient {
	return &appserverSubServiceClient{cc}
}

func (c *appserverSubServiceClient) CreateAppserverSub(ctx context.Context, in *CreateAppserverSubRequest, opts ...grpc.CallOption) (*CreateAppserverSubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppserverSubResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_CreateAppserverSub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverSubServiceClient) GetUserAppserverSubs(ctx context.Context, in *GetUserAppserverSubsRequest, opts ...grpc.CallOption) (*GetUserAppserverSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAppserverSubsResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_GetUserAppserverSubs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverSubServiceClient) GetAllUsersAppserverSubs(ctx context.Context, in *GetAllUsersAppserverSubsRequest, opts ...grpc.CallOption) (*GetAllUsersAppserverSubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersAppserverSubsResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_GetAllUsersAppserverSubs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appserverSubServiceClient) DeleteAppserverSub(ctx context.Context, in *DeleteAppserverSubRequest, opts ...grpc.CallOption) (*DeleteAppserverSubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppserverSubResponse)
	err := c.cc.Invoke(ctx, AppserverSubService_DeleteAppserverSub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppserverSubServiceServer is the server API for AppserverSubService service.
// All implementations must embed UnimplementedAppserverSubServiceServer
// for forward compatibility.
type AppserverSubServiceServer interface {
	CreateAppserverSub(context.Context, *CreateAppserverSubRequest) (*CreateAppserverSubResponse, error)
	GetUserAppserverSubs(context.Context, *GetUserAppserverSubsRequest) (*GetUserAppserverSubsResponse, error)
	GetAllUsersAppserverSubs(context.Context, *GetAllUsersAppserverSubsRequest) (*GetAllUsersAppserverSubsResponse, error)
	DeleteAppserverSub(context.Context, *DeleteAppserverSubRequest) (*DeleteAppserverSubResponse, error)
	mustEmbedUnimplementedAppserverSubServiceServer()
}

// UnimplementedAppserverSubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppserverSubServiceServer struct{}

func (UnimplementedAppserverSubServiceServer) CreateAppserverSub(context.Context, *CreateAppserverSubRequest) (*CreateAppserverSubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppserverSub not implemented")
}
func (UnimplementedAppserverSubServiceServer) GetUserAppserverSubs(context.Context, *GetUserAppserverSubsRequest) (*GetUserAppserverSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAppserverSubs not implemented")
}
func (UnimplementedAppserverSubServiceServer) GetAllUsersAppserverSubs(context.Context, *GetAllUsersAppserverSubsRequest) (*GetAllUsersAppserverSubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsersAppserverSubs not implemented")
}
func (UnimplementedAppserverSubServiceServer) DeleteAppserverSub(context.Context, *DeleteAppserverSubRequest) (*DeleteAppserverSubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppserverSub not implemented")
}
func (UnimplementedAppserverSubServiceServer) mustEmbedUnimplementedAppserverSubServiceServer() {}
func (UnimplementedAppserverSubServiceServer) testEmbeddedByValue()                             {}

// UnsafeAppserverSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppserverSubServiceServer will
// result in compilation errors.
type UnsafeAppserverSubServiceServer interface {
	mustEmbedUnimplementedAppserverSubServiceServer()
}

func RegisterAppserverSubServiceServer(s grpc.ServiceRegistrar, srv AppserverSubServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppserverSubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppserverSubService_ServiceDesc, srv)
}

func _AppserverSubService_CreateAppserverSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppserverSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).CreateAppserverSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_CreateAppserverSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).CreateAppserverSub(ctx, req.(*CreateAppserverSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverSubService_GetUserAppserverSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAppserverSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).GetUserAppserverSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_GetUserAppserverSubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).GetUserAppserverSubs(ctx, req.(*GetUserAppserverSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverSubService_GetAllUsersAppserverSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersAppserverSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).GetAllUsersAppserverSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_GetAllUsersAppserverSubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).GetAllUsersAppserverSubs(ctx, req.(*GetAllUsersAppserverSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppserverSubService_DeleteAppserverSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppserverSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppserverSubServiceServer).DeleteAppserverSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppserverSubService_DeleteAppserverSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppserverSubServiceServer).DeleteAppserverSub(ctx, req.(*DeleteAppserverSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppserverSubService_ServiceDesc is the grpc.ServiceDesc for AppserverSubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppserverSubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.appserversub.AppserverSubService",
	HandlerType: (*AppserverSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppserverSub",
			Handler:    _AppserverSubService_CreateAppserverSub_Handler,
		},
		{
			MethodName: "GetUserAppserverSubs",
			Handler:    _AppserverSubService_GetUserAppserverSubs_Handler,
		},
		{
			MethodName: "GetAllUsersAppserverSubs",
			Handler:    _AppserverSubService_GetAllUsersAppserverSubs_Handler,
		},
		{
			MethodName: "DeleteAppserverSub",
			Handler:    _AppserverSubService_DeleteAppserverSub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/appserver_sub/appserver_sub.proto",
}
