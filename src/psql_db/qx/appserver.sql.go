// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: appserver.sql

package qx

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAppserver = `-- name: CreateAppserver :one

INSERT INTO appserver (
  name,
  appuser_id
) VALUES (
  $1,
  $2
)
RETURNING id, name, appuser_id, created_at, updated_at
`

type CreateAppserverParams struct {
	Name      string
	AppuserID uuid.UUID
}

// This query might be removed. Hence the 1=0. So it returns no data.
func (q *Queries) CreateAppserver(ctx context.Context, arg CreateAppserverParams) (Appserver, error) {
	row := q.db.QueryRow(ctx, createAppserver, arg.Name, arg.AppuserID)
	var i Appserver
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AppuserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppserver = `-- name: DeleteAppserver :execrows
DELETE FROM appserver
WHERE id=$1
  AND appuser_id=$2
`

type DeleteAppserverParams struct {
	ID        uuid.UUID
	AppuserID uuid.UUID
}

func (q *Queries) DeleteAppserver(ctx context.Context, arg DeleteAppserverParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAppserver, arg.ID, arg.AppuserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAppserverById = `-- name: GetAppserverById :one
SELECT id, name, appuser_id, created_at, updated_at
FROM appserver
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetAppserverById(ctx context.Context, id uuid.UUID) (Appserver, error) {
	row := q.db.QueryRow(ctx, getAppserverById, id)
	var i Appserver
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AppuserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserAppservers = `-- name: ListUserAppservers :many
SELECT id, name, appuser_id, created_at, updated_at
FROM appserver
WHERE name=COALESCE($2, name)
  AND appuser_id = $1
`

type ListUserAppserversParams struct {
	AppuserID uuid.UUID
	Name      pgtype.Text
}

func (q *Queries) ListUserAppservers(ctx context.Context, arg ListUserAppserversParams) ([]Appserver, error) {
	rows, err := q.db.Query(ctx, listUserAppservers, arg.AppuserID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appserver
	for rows.Next() {
		var i Appserver
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AppuserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
