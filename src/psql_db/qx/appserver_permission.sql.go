// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appserver_permission.sql

package qx

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAppserverPermission = `-- name: CreateAppserverPermission :one
INSERT INTO appserver_permission (
  appserver_id,
  appuser_id,
  read_all,
  write_all,
  delete_all
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, appserver_id, appuser_id, read_all, write_all, delete_all, created_at, updated_at
`

type CreateAppserverPermissionParams struct {
	AppserverID uuid.UUID
	AppuserID   uuid.UUID
	ReadAll     pgtype.Bool
	WriteAll    pgtype.Bool
	DeleteAll   pgtype.Bool
}

func (q *Queries) CreateAppserverPermission(ctx context.Context, arg CreateAppserverPermissionParams) (AppserverPermission, error) {
	row := q.db.QueryRow(ctx, createAppserverPermission,
		arg.AppserverID,
		arg.AppuserID,
		arg.ReadAll,
		arg.WriteAll,
		arg.DeleteAll,
	)
	var i AppserverPermission
	err := row.Scan(
		&i.ID,
		&i.AppserverID,
		&i.AppuserID,
		&i.ReadAll,
		&i.WriteAll,
		&i.DeleteAll,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppserverPermission = `-- name: DeleteAppserverPermission :execrows
DELETE FROM appserver_permission
WHERE id = $1
`

func (q *Queries) DeleteAppserverPermission(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAppserverPermission, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAppserverPermissionById = `-- name: GetAppserverPermissionById :one
SELECT id, appserver_id, appuser_id, read_all, write_all, delete_all, created_at, updated_at
FROM appserver_permission
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAppserverPermissionById(ctx context.Context, id uuid.UUID) (AppserverPermission, error) {
	row := q.db.QueryRow(ctx, getAppserverPermissionById, id)
	var i AppserverPermission
	err := row.Scan(
		&i.ID,
		&i.AppserverID,
		&i.AppuserID,
		&i.ReadAll,
		&i.WriteAll,
		&i.DeleteAll,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppserverPermissionForUser = `-- name: GetAppserverPermissionForUser :one
SELECT id, appserver_id, appuser_id, read_all, write_all, delete_all, created_at, updated_at
FROM appserver_permission
WHERE appserver_id = $1
  AND appuser_id = $2
LIMIT 1
`

type GetAppserverPermissionForUserParams struct {
	AppserverID uuid.UUID
	AppuserID   uuid.UUID
}

func (q *Queries) GetAppserverPermissionForUser(ctx context.Context, arg GetAppserverPermissionForUserParams) (AppserverPermission, error) {
	row := q.db.QueryRow(ctx, getAppserverPermissionForUser, arg.AppserverID, arg.AppuserID)
	var i AppserverPermission
	err := row.Scan(
		&i.ID,
		&i.AppserverID,
		&i.AppuserID,
		&i.ReadAll,
		&i.WriteAll,
		&i.DeleteAll,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAppserverPermissions = `-- name: ListAppserverPermissions :many
SELECT id, appserver_id, appuser_id, read_all, write_all, delete_all, created_at, updated_at
FROM appserver_permission
WHERE appserver_id = $1
`

func (q *Queries) ListAppserverPermissions(ctx context.Context, appserverID uuid.UUID) ([]AppserverPermission, error) {
	rows, err := q.db.Query(ctx, listAppserverPermissions, appserverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppserverPermission
	for rows.Next() {
		var i AppserverPermission
		if err := rows.Scan(
			&i.ID,
			&i.AppserverID,
			&i.AppuserID,
			&i.ReadAll,
			&i.WriteAll,
			&i.DeleteAll,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
