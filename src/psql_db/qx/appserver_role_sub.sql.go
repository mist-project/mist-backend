// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appserver_role_sub.sql

package qx

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAppserverRoleSub = `-- name: CreateAppserverRoleSub :one
INSERT INTO appserver_role_sub (
  appserver_sub_id,
  appserver_role_id,
  appuser_id,
  appserver_id
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, appuser_id, appserver_sub_id, appserver_role_id, appserver_id, created_at, updated_at
`

type CreateAppserverRoleSubParams struct {
	AppserverSubID  uuid.UUID
	AppserverRoleID uuid.UUID
	AppuserID       uuid.UUID
	AppserverID     uuid.UUID
}

func (q *Queries) CreateAppserverRoleSub(ctx context.Context, arg CreateAppserverRoleSubParams) (AppserverRoleSub, error) {
	row := q.db.QueryRow(ctx, createAppserverRoleSub,
		arg.AppserverSubID,
		arg.AppserverRoleID,
		arg.AppuserID,
		arg.AppserverID,
	)
	var i AppserverRoleSub
	err := row.Scan(
		&i.ID,
		&i.AppuserID,
		&i.AppserverSubID,
		&i.AppserverRoleID,
		&i.AppserverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppserverRoleSub = `-- name: DeleteAppserverRoleSub :execrows
DELETE FROM appserver_role_sub as ars
WHERE ars.id=$1
`

func (q *Queries) DeleteAppserverRoleSub(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAppserverRoleSub, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const filterAppserverRoleSub = `-- name: FilterAppserverRoleSub :many
SELECT
  role_sub.id,
  role_sub.appuser_id,
  role_sub.appserver_role_id,
  role_sub.appserver_id
FROM appserver_role_sub AS role_sub
WHERE appuser_id=COALESCE($1, appuser_id)
  AND appserver_id=COALESCE($2, appserver_id)
  AND appserver_role_id=COALESCE($3, appserver_role_id)
  AND appserver_sub_id=COALESCE($4, appserver_sub_id)
`

type FilterAppserverRoleSubParams struct {
	AppuserID       pgtype.UUID
	AppserverID     pgtype.UUID
	AppserverRoleID pgtype.UUID
	AppserverSubID  pgtype.UUID
}

type FilterAppserverRoleSubRow struct {
	ID              uuid.UUID
	AppuserID       uuid.UUID
	AppserverRoleID uuid.UUID
	AppserverID     uuid.UUID
}

func (q *Queries) FilterAppserverRoleSub(ctx context.Context, arg FilterAppserverRoleSubParams) ([]FilterAppserverRoleSubRow, error) {
	rows, err := q.db.Query(ctx, filterAppserverRoleSub,
		arg.AppuserID,
		arg.AppserverID,
		arg.AppserverRoleID,
		arg.AppserverSubID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterAppserverRoleSubRow
	for rows.Next() {
		var i FilterAppserverRoleSubRow
		if err := rows.Scan(
			&i.ID,
			&i.AppuserID,
			&i.AppserverRoleID,
			&i.AppserverID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppserverRoleSubById = `-- name: GetAppserverRoleSubById :one
SELECT id, appuser_id, appserver_sub_id, appserver_role_id, appserver_id, created_at, updated_at
FROM appserver_role_sub
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetAppserverRoleSubById(ctx context.Context, id uuid.UUID) (AppserverRoleSub, error) {
	row := q.db.QueryRow(ctx, getAppserverRoleSubById, id)
	var i AppserverRoleSub
	err := row.Scan(
		&i.ID,
		&i.AppuserID,
		&i.AppserverSubID,
		&i.AppserverRoleID,
		&i.AppserverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listServerRoleSubs = `-- name: ListServerRoleSubs :many
SELECT
  role_sub.id,
  role_sub.appuser_id,
  role_sub.appserver_role_id,
  role_sub.appserver_id

FROM appserver_role_sub AS role_sub
WHERE role_sub.appserver_id=$1
`

type ListServerRoleSubsRow struct {
	ID              uuid.UUID
	AppuserID       uuid.UUID
	AppserverRoleID uuid.UUID
	AppserverID     uuid.UUID
}

func (q *Queries) ListServerRoleSubs(ctx context.Context, appserverID uuid.UUID) ([]ListServerRoleSubsRow, error) {
	rows, err := q.db.Query(ctx, listServerRoleSubs, appserverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServerRoleSubsRow
	for rows.Next() {
		var i ListServerRoleSubsRow
		if err := rows.Scan(
			&i.ID,
			&i.AppuserID,
			&i.AppserverRoleID,
			&i.AppserverID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
