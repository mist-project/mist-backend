// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: appuser.sql

package qx

import (
	"context"

	"github.com/google/uuid"
)

const createAppuser = `-- name: CreateAppuser :one
INSERT INTO appuser (
  id,
  username
) VALUES (
  $1,
  $2
)
RETURNING id, username, online_status, created_at, updated_at
`

type CreateAppuserParams struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) CreateAppuser(ctx context.Context, arg CreateAppuserParams) (Appuser, error) {
	row := q.db.QueryRow(ctx, createAppuser, arg.ID, arg.Username)
	var i Appuser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.OnlineStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppuserById = `-- name: GetAppuserById :one
SELECT id, username, online_status, created_at, updated_at
FROM appuser
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetAppuserById(ctx context.Context, id uuid.UUID) (Appuser, error) {
	row := q.db.QueryRow(ctx, getAppuserById, id)
	var i Appuser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.OnlineStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
