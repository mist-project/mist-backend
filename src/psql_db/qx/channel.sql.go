// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel.sql

package qx

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channel (
  name,
  appserver_id,
  is_private
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, name, appserver_id, is_private, created_at, updated_at
`

type CreateChannelParams struct {
	Name        string
	AppserverID uuid.UUID
	IsPrivate   bool
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createChannel, arg.Name, arg.AppserverID, arg.IsPrivate)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AppserverID,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :execrows
DELETE FROM channel
WHERE id=$1
`

func (q *Queries) DeleteChannel(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChannel, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const filterChannel = `-- name: FilterChannel :many
SELECT id, name, appserver_id, is_private, created_at, updated_at
FROM channel
WHERE appserver_id = COALESCE($1, appserver_id)
  AND is_private = COALESCE($2, is_private)
`

type FilterChannelParams struct {
	AppserverID pgtype.UUID
	IsPrivate   pgtype.Bool
}

func (q *Queries) FilterChannel(ctx context.Context, arg FilterChannelParams) ([]Channel, error) {
	rows, err := q.db.Query(ctx, filterChannel, arg.AppserverID, arg.IsPrivate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AppserverID,
			&i.IsPrivate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelById = `-- name: GetChannelById :one
SELECT id, name, appserver_id, is_private, created_at, updated_at
FROM channel
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetChannelById(ctx context.Context, id uuid.UUID) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannelById, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AppserverID,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelUsersByRoles = `-- name: GetChannelUsersByRoles :many
SELECT DISTINCT appuser.id, appuser.username, appuser.online_status, appuser.created_at, appuser.updated_at
FROM appuser
JOIN appserver_role_sub ON appserver_role_sub.appuser_id = appuser.id
JOIN channel_role ON channel_role.appserver_role_id = appserver_role_sub.appserver_role_id
WHERE channel_role.appserver_role_id = ANY($1::uuid[])
`

func (q *Queries) GetChannelUsersByRoles(ctx context.Context, dollar_1 []uuid.UUID) ([]Appuser, error) {
	rows, err := q.db.Query(ctx, getChannelUsersByRoles, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appuser
	for rows.Next() {
		var i Appuser
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.OnlineStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelsForUsers = `-- name: GetChannelsForUsers :many
SELECT DISTINCT
  u.appuser_id::uuid as appuser_id,
  channel.id AS channel_id,
  channel.name AS channel_name,
  channel.is_private AS channel_is_private,
  channel.appserver_id AS channel_appserver_id
FROM (
  SELECT unnest($1::uuid[]) AS appuser_id
) u
LEFT JOIN channel
  ON channel.appserver_id = $2
LEFT JOIN channel_role
  ON channel_role.channel_id = channel.id
LEFT JOIN appserver_role_sub
  ON appserver_role_sub.appserver_role_id = channel_role.appserver_role_id
    AND appserver_role_sub.appuser_id = u.appuser_id
WHERE
  channel.is_private = false
  OR appserver_role_sub.appuser_id IS NOT NULL
GROUP BY (u.appuser_id, channel.id)
`

type GetChannelsForUsersParams struct {
	Column1     []uuid.UUID
	AppserverID uuid.UUID
}

type GetChannelsForUsersRow struct {
	AppuserID          uuid.UUID
	ChannelID          pgtype.UUID
	ChannelName        pgtype.Text
	ChannelIsPrivate   pgtype.Bool
	ChannelAppserverID pgtype.UUID
}

func (q *Queries) GetChannelsForUsers(ctx context.Context, arg GetChannelsForUsersParams) ([]GetChannelsForUsersRow, error) {
	rows, err := q.db.Query(ctx, getChannelsForUsers, arg.Column1, arg.AppserverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChannelsForUsersRow
	for rows.Next() {
		var i GetChannelsForUsersRow
		if err := rows.Scan(
			&i.AppuserID,
			&i.ChannelID,
			&i.ChannelName,
			&i.ChannelIsPrivate,
			&i.ChannelAppserverID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelsIdIn = `-- name: GetChannelsIdIn :many
SELECT id, name, appserver_id, is_private, created_at, updated_at
FROM channel
WHERE id = ANY($1::uuid[])
`

func (q *Queries) GetChannelsIdIn(ctx context.Context, dollar_1 []uuid.UUID) ([]Channel, error) {
	rows, err := q.db.Query(ctx, getChannelsIdIn, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AppserverID,
			&i.IsPrivate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServerChannels = `-- name: ListServerChannels :many
SELECT id, name, appserver_id, is_private, created_at, updated_at
FROM channel
WHERE name=COALESCE($2, name)
  AND appserver_id=$1
`

type ListServerChannelsParams struct {
	AppserverID uuid.UUID
	Name        pgtype.Text
}

func (q *Queries) ListServerChannels(ctx context.Context, arg ListServerChannelsParams) ([]Channel, error) {
	rows, err := q.db.Query(ctx, listServerChannels, arg.AppserverID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AppserverID,
			&i.IsPrivate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
