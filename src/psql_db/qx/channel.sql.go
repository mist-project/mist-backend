// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel.sql

package qx

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channel (
  name,
  appserver_id
) VALUES (
  $1,
  $2
)
RETURNING id, name, appserver_id, created_at, updated_at
`

type CreateChannelParams struct {
	Name        string
	AppserverID uuid.UUID
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createChannel, arg.Name, arg.AppserverID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AppserverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :execrows
DELETE FROM channel
WHERE id=$1
`

func (q *Queries) DeleteChannel(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChannel, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getChannelById = `-- name: GetChannelById :one
SELECT id, name, appserver_id, created_at, updated_at
FROM channel
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetChannelById(ctx context.Context, id uuid.UUID) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannelById, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AppserverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listServerChannels = `-- name: ListServerChannels :many
SELECT id, name, appserver_id, created_at, updated_at
FROM channel
WHERE name=COALESCE($2, name)
  AND appserver_id=$1
`

type ListServerChannelsParams struct {
	AppserverID uuid.UUID
	Name        pgtype.Text
}

func (q *Queries) ListServerChannels(ctx context.Context, arg ListServerChannelsParams) ([]Channel, error) {
	rows, err := q.db.Query(ctx, listServerChannels, arg.AppserverID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AppserverID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
