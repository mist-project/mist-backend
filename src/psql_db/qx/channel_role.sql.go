// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel_role.sql

package qx

import (
	"context"

	"github.com/google/uuid"
)

const createChannelRole = `-- name: CreateChannelRole :one
INSERT INTO channel_role (
  channel_id,
  appserver_role_id,
  appserver_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, appserver_id, channel_id, appserver_role_id, created_at, updated_at
`

type CreateChannelRoleParams struct {
	ChannelID       uuid.UUID
	AppserverRoleID uuid.UUID
	AppserverID     uuid.UUID
}

func (q *Queries) CreateChannelRole(ctx context.Context, arg CreateChannelRoleParams) (ChannelRole, error) {
	row := q.db.QueryRow(ctx, createChannelRole, arg.ChannelID, arg.AppserverRoleID, arg.AppserverID)
	var i ChannelRole
	err := row.Scan(
		&i.ID,
		&i.AppserverID,
		&i.ChannelID,
		&i.AppserverRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChannelRole = `-- name: DeleteChannelRole :execrows
DELETE FROM channel_role as cr
WHERE cr.id=$1
`

func (q *Queries) DeleteChannelRole(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChannelRole, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getChannelRoleById = `-- name: GetChannelRoleById :one
SELECT id, appserver_id, channel_id, appserver_role_id, created_at, updated_at
FROM channel_role
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetChannelRoleById(ctx context.Context, id uuid.UUID) (ChannelRole, error) {
	row := q.db.QueryRow(ctx, getChannelRoleById, id)
	var i ChannelRole
	err := row.Scan(
		&i.ID,
		&i.AppserverID,
		&i.ChannelID,
		&i.AppserverRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listChannelRoles = `-- name: ListChannelRoles :many
SELECT id, appserver_id, channel_id, appserver_role_id, created_at, updated_at
FROM channel_role
WHERE channel_id=$1
`

func (q *Queries) ListChannelRoles(ctx context.Context, channelID uuid.UUID) ([]ChannelRole, error) {
	rows, err := q.db.Query(ctx, listChannelRoles, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelRole
	for rows.Next() {
		var i ChannelRole
		if err := rows.Scan(
			&i.ID,
			&i.AppserverID,
			&i.ChannelID,
			&i.AppserverRoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
