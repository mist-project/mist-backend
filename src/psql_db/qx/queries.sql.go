// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package qx

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAppserver = `-- name: CreateAppserver :one
INSERT INTO appserver (
  name
) values (
  $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateAppserver(ctx context.Context, name string) (Appserver, error) {
	row := q.db.QueryRow(ctx, createAppserver, name)
	var i Appserver
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteAppserver = `-- name: DeleteAppserver :execrows
DELETE FROM appserver
WHERE id = $1
`

func (q *Queries) DeleteAppserver(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAppserver, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAppserver = `-- name: GetAppserver :one
SELECT id, name, created_at
FROM appserver
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetAppserver(ctx context.Context, id uuid.UUID) (Appserver, error) {
	row := q.db.QueryRow(ctx, getAppserver, id)
	var i Appserver
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listAppservers = `-- name: ListAppservers :many
SELECT id, name, created_at
FROM appserver
WHERE
  (name = $1 OR $1 IS NULL)
`

func (q *Queries) ListAppservers(ctx context.Context, name pgtype.Text) ([]Appserver, error) {
	rows, err := q.db.Query(ctx, listAppservers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appserver
	for rows.Next() {
		var i Appserver
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
